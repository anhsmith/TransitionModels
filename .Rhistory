chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50'))
# Simulate some data
set.seed(123)
N0 <- 100
N1 <- 20
mu0 <- 1200
mu1 <- 1400
sigma <- 30
x <- c(rnorm(N0, mu0, sigma), rnorm(N1, mu1, sigma))
x <- pmin(pmax(x, 1100), 1500)
m <- c(rep(0, N0), rep(1, N1))
# Prepare data for Stan
stan_data <- list(N = N0 + N1, x = x, m = m)
# Fit the Stan model
fit <- sampling(
stan_gen01,
data = stan_data,
chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50'))
# Simulate some data
set.seed(123)
N0 <- 100
N1 <- 20
mu0 <- 1200
mu1 <- 1400
sigma <- 30
x <- c(rnorm(N0, mu0, sigma), rnorm(N1, mu1, sigma))
x <- pmin(pmax(x, 1100), 1500)
m <- c(rep(0, N0), rep(1, N1))
# Prepare data for Stan
stan_data <- list(N = N0 + N1, x = x, m = m)
# Fit the Stan model
fit <- sampling(
stan_gen01,
data = stan_data,
chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50'))
data.frame(x,m)
data.frame(x,m) |>
ggplot() +
aes(x=x,group=m, col=m) +
geom_density()
data.frame(x,m) |>
ggplot() +
aes(x=x,group=m, col=m) +
geom_histogram()
# Simulate some data
set.seed(123)
N0 <- 100
N1 <- 20
mu0 <- 1200
mu1 <- 1400
sigma <- 80
x <- c(rnorm(N0, mu0, sigma), rnorm(N1, mu1, sigma))
x <- pmin(pmax(x, 1100), 1500) # truncate
m <- c(rep(0, N0), rep(1, N1))
data.frame(x,m) |>
ggplot() +
aes(x=x,group=m, col=m) +
geom_histogram()
data.frame(x,m) |>
ggplot() +
aes(x=x,group=m, col=m) +
geom_density()
# Prepare data for Stan
stan_data <- list(N = N0 + N1, x = x, m = m)
# Fit the Stan model
fit <- sampling(
stan_gen01,
data = stan_data,
chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50'))
rstan:::rstudio_stanc("gen02.stan")
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop
)
# Fit the Stan model
fit <- sampling(
stan_gen02,
data = stan_data,
chains=4
)
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop
)
stan_data
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
pop
# Fit the Stan model
fit <- sampling(
stan_gen02,
data = stan_data,
chains=4
)
stan_gen02 <- stan_model(file = 'gen02.stan')
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop
)
# Fit the Stan model
fit <- sampling(
stan_gen02,
data = stan_data,
chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50', 'global_m50', 'p_m0_given_x', 'p_m1_given_x'))
# Extract samples
posterior <- extract(fit)
stan_gen02 <- stan_model(file = 'gen02.stan')
rstan:::rstudio_stanc("gen02.stan")
stan_gen02 <- stan_model(file = 'gen02.stan')
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop
)
# Fit the Stan model
fit <- sampling(
stan_gen02,
data = stan_data,
chains=4
)
# Extract results
print(fit, pars = c('mu0', 'mu1', 'sigma', 'm50', 'global_m50', 'p_m0_given_x', 'p_m1_given_x'))
# Extract samples
posterior <- extract(fit)
fit <- sampling(
stan_gen02,
data = stan_data,
chains=1
)
# initial values
inits = list(
list(mu0_global=1200, mu1_global=1400, tau = 5, sigma = 5)
)
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits
chains=1
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
# initial values
inits = list(
list(mu0_global=1200, mu1_global=1400, tau = 5, sigma = 5)
)
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
# initial values
inits = list(
list(mu0_global=1300, mu1_global=1300, tau = 5, sigma = 5)
)
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
stan_data
stan_gen02 <- stan_model(file = 'gen02.stan')
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
# initial values
inits = list(
list(mu0_global=1300, mu1_global=1300, tau = 5, sigma = 5)
)
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
stan_gen02 <- stan_model(file = 'gen02.stan')
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop
)
fit <- sampling(
stan_gen02,
data = stan_data,
init = inits,
chains=1
)
rstan:::rstudio_stanc("Data/gen03.stan")
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen03 <- stan_model(file = 'gen03.stan')
stan_gen02b <- stan_model(file = 'gen02b.stan')
fit <- sampling(
stan_gen02b,
data = stan_data,
init = inits,
chains=1
)
rstan:::rstudio_stanc("gen02c.stan")
rstan:::rstudio_stanc("gen02c.stan")
rstan:::rstudio_stanc("gen02c.stan")
# Simulate some data
set.seed(123)
N <- 200  # Total number of data points
J <- 5    # Number of populations
pop <- sample(1:J, N, replace = TRUE)
# Generate data for each population
mu0_global <- 1200
mu1_global <- 1400
tau <- 50
sigma <- 30
mu0 <- rnorm(J, mu0_global, tau)
mu1 <- rnorm(J, mu1_global, tau)
x <- numeric(N)
m <- rbinom(N, 1, 0.5)
for (i in 1:N) {
if (m[i] == 0) {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu0[pop[i]], sd=sigma)
} else {
x[i] <- rtruncnorm(1, a=1100, b=1500, mean=mu1[pop[i]], sd=sigma)
}
}
L = 1100
U = 1500
# Prepare data for Stan
stan_data <- list(
N = N,
x = x,
m = m,
J = J,
pop = pop,
L = L,
U = U
)
stan_gen02c <- stan_model(file = 'gen02c.stan')
stan_data
fit <- sampling(
stan_gen02c,
data = stan_data,
init = inits,
chains=1
)
#| message: false
library(tidyverse)
library(rstan)
library(brms)
library(truncnorm)
d <- read_csv("Data/LHDC.csv") |>
filter(!(Population == "Southwest Atlantic" & !is.na(OWt))) |>
transmute(
Population,
Country,
Sex,
Stage = as_factor(LS_Score),
Length = TL
)
d |>
filter(Stage != 2.3) |>
group_by(Population, Stage, Sex) |>
summarise(n = n()) |>
pivot_wider(
names_from = Stage,
values_from = n
)
da <- d |> filter(Population == "Australia")
da |>
# filter(Length > 1100) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram() +
facet_grid(
rows = vars(Stage),
cols = vars(Sex),
scales = "free_y"
) +
ggtitle("Australian data")
da |>
# filter(Length > 1100) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram(position = "stack") +
facet_grid(
cols = vars(Sex),
scales = "free_y"
) +
ggtitle("Australian data")
da |>
# filter(Length > 1100) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_density(position = "stack", col = NA, bw=50) +
facet_grid(
cols = vars(Sex),
scales = "free_y"
) +
ggtitle("Australian data")
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length) +
geom_histogram(alpha = .5, col = NA, position = "identity") +
facet_grid(
cols = vars(Sex),
rows = vars(Population)
)
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram(alpha = .5, col = NA, position = "stack") +
facet_grid(
cols = vars(Sex),
rows = vars(Population)
)
#| fig-height: 8
#| fig-width: 6
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram(alpha = .5, col = NA, position = "identity") +
facet_grid(
cols = vars(Sex),
rows = vars(Population)
)
#| fig-height: 8
#| fig-width: 6
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_density(alpha = .5, col = NA) +
facet_grid(
cols = vars(Sex),
rows = vars(Population),
scales = "free_y"
)
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram(alpha = .5, col = NA, position = "stack") +
facet_grid(
cols = vars(Sex),
rows = vars(Population)
)
#| fig-height: 8
#| fig-width: 6
d |>
filter(Length > 1050 & Length < 1650) |>
ggplot() +
aes(x = Length, fill = factor(Stage), group = Stage) +
geom_histogram(alpha = .5, col = NA, position = "stack") +
facet_grid(
cols = vars(Sex),
rows = vars(Population)
) +
ggtitle("Stacked histogram")
